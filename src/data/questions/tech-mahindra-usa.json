[
  {
    "category": "Coding",
    "question": "Solve the for PiCalculation problem.",
    "answer": "Implement an optimized solution, explain complexity, and cover edge cases."
  },
  {
    "category": "Java",
    "question": "What is the difference between HashMap and ConcurrentHashMap?",
    "answer": "HashMap is not thread-safe; ConcurrentHashMap supports concurrent updates via internal partitioning and atomic operations."
  },
  {
    "category": "AWS",
    "question": "Explain EC2 vs Lambda.",
    "answer": "EC2 provides long-running VMs with full control. Lambda is serverless, event-driven with auto-scaling and per-invocation billing."
  },
  {
    "category": "Spring Boot",
    "question": "How does dependency injection work in Spring Boot?",
    "answer": "Beans are auto-wired by type or name using the IoC container. Prefer constructor injection; use @Component/@Service and @Configuration."
  },
  {
    "category": "Coding",
    "question": "Solve the for PerfectNumbers and answered all of problem.",
    "answer": "Implement an optimized solution, explain complexity, and cover edge cases."
  },
  {
    "category": "Coding",
    "question": "Solve the We should receive positive feedback problem.",
    "answer": "Implement an optimized solution, explain complexity, and cover edge cases."
  },
  {
    "category": "Kafka",
    "question": "When would you prefer Kafka over traditional queues?",
    "answer": "When you need high-throughput, scalable, persistent streams with consumer groups and replayability."
  },
  {
    "category": "Coding",
    "question": "Solve the and answered other questions problem.",
    "answer": "Implement an optimized solution, explain complexity, and cover edge cases."
  },
  {
    "category": "Coding",
    "question": "Solve the one Jenkins coding task problem.",
    "answer": "Implement an optimized solution, explain complexity, and cover edge cases."
  },
  {
    "category": "Coding",
    "question": "Solve the reverseStringPreserveSpaces and problem.",
    "answer": "Implement an optimized solution, explain complexity, and cover edge cases."
  },
  {
    "category": "System Design",
    "question": "How would you design a scalable system for this domain?",
    "answer": "Discuss services, data model, storage, caching, messaging, failure handling, and observability."
  }
]